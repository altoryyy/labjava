--
-- PostgreSQL database dump
--

-- Dumped from database version 17.4
-- Dumped by pg_dump version 17.4

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: cuisine; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cuisine (
    id bigint NOT NULL,
    name character varying(255)
);


ALTER TABLE public.cuisine OWNER TO postgres;

--
-- Name: cuisine_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.cuisine ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.cuisine_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: ingredient; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ingredient (
    id bigint NOT NULL,
    name character varying(255)
);


ALTER TABLE public.ingredient OWNER TO postgres;

--
-- Name: ingredient_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.ingredient ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.ingredient_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: recipe; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.recipe (
    id bigint NOT NULL,
    cuisine_id bigint,
    description character varying(255),
    title character varying(255)
);


ALTER TABLE public.recipe OWNER TO postgres;

--
-- Name: recipe_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.recipe ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.recipe_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: recipe_ingredients; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.recipe_ingredients (
    recipe_id bigint NOT NULL,
    ingredient_id bigint NOT NULL
);


ALTER TABLE public.recipe_ingredients OWNER TO postgres;

--
-- Name: review; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.review (
    id bigint NOT NULL,
    rating integer,
    recipe_id bigint,
    text character varying(255)
);


ALTER TABLE public.review OWNER TO postgres;

--
-- Name: review_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.review ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.review_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: cuisine; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.cuisine (id, name) FROM stdin;
3	Итальянская
4	Японская
6	Русская
7	тест
5	Белорусская
8	Американская
9	Греческая
10	Японская
11	Французская
12	Украинская
13	Мексиканская
14	Израильская
15	Вегетарианская
\.


--
-- Data for Name: ingredient; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ingredient (id, name) FROM stdin;
6	Томатный соус
25	Паста
26	Томаты
27	Чеснок
28	Оливковое масло
29	Базилик
30	Романо
31	Куриное филе
32	Пармезан
33	Гренки
34	Соус Цезарь
35	Булка
36	Говяжий фарш
37	Сыр
38	Салат
39	Помидор
40	Огурцы
41	Оливки
42	Фета
43	Соевый соус
44	Мед
45	Кунжут
46	Рис арборио
47	Грибы
48	Лук
49	Белое вино
50	Бульон
51	Картофель
52	Морковь
53	Перец
54	Кабачок
55	Специи
56	Тыва
57	Сливки
58	Масло
59	Зелень
60	Яйца
61	Панировочные сухари
62	Фасоль
63	Корица
\.


--
-- Data for Name: recipe; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.recipe (id, cuisine_id, description, title) FROM stdin;
49	3	Простое и ароматное блюдо на основе пасты и свежего томатного соуса.	Паста с томатным соусом
50	8	Классический салат с курицей, гренками и пармезаном, заправленный соусом Цезарь.	Цезарь салат
51	8	Сочный бургер с говяжьим фаршем и свежими овощами.	Бургер с говядиной
52	9	Освежающий салат с огурцами, помидорами, оливками и фетой.	Греческий салат
53	4	Курица, приготовленная в сладковато-соленом соусе терияки.	Курица терияки
54	3	Кремовое ризотто с ароматными грибами и пармезаном.	Ризотто с грибами
55	11	Питательное рагу с разнообразными овощами и пряностями.	Овощное рагу
56	12	Нежный суп из тыквы с сливками и пряностями.	Тыквенный суп
57	6	Хрустящие куриные котлеты с нежной начинкой из масла и зелени.	Котлеты по-киевски
58	13	Острый мясной рагу с фасолью и томатами.	Чили кон карне
59	3	Слои пасты, мясного соуса и сыра, запеченные до золотистой корочки.	Лазанья
60	11	Нежный суп из брокколи с сливками, идеальный для холодного вечера.	Суп-пюре из брокколи
61	8	Хрустящие крылышки, запеченные в сладком медово-горчичном соусе.	Куриные крылышки в медово-горчичном соусе
62	15	Нежный пирог с сочными яблоками и корицей.	Пирог с яблоками
63	14	Яйца, запеченные в пряном томатном соусе с перцем.	Шакшука
64	15	Полезное блюдо с киноа и свежими овощами.	Киноа с овощами
65	3	Классическая пицца с томатами, моцареллой и базиликом.	Пицца Маргарита
66	6	Тонкие блины с различными начинками: мясом, ягодами или творогом.	Блины с начинкой
67	9	Салат с тунцом, яйцами, оливками и свежими овощами.	Салат Нисуаз
68	6	Теплые пирожки с начинкой из картофеля и лука.	Пирожки с картошкой
\.


--
-- Data for Name: recipe_ingredients; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.recipe_ingredients (recipe_id, ingredient_id) FROM stdin;
49	25
49	26
49	27
49	28
49	29
50	31
50	32
50	33
50	34
50	38
51	35
51	36
51	37
51	38
51	39
52	40
52	39
52	41
52	42
53	31
53	43
53	44
53	45
54	46
54	47
54	48
54	49
54	50
54	32
55	51
55	52
55	53
55	54
55	55
56	56
56	48
56	57
57	31
57	58
57	59
57	60
58	36
58	62
58	26
58	27
59	25
59	36
59	32
59	6
60	48
60	57
60	50
61	31
61	44
61	43
62	61
62	62
62	63
63	60
63	6
63	39
64	25
64	40
64	51
64	54
65	25
65	6
65	29
66	61
66	31
66	50
67	36
67	60
67	41
67	39
68	51
68	48
68	58
\.


--
-- Data for Name: review; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.review (id, rating, recipe_id, text) FROM stdin;
13	5	49	Прекрасное блюдо! Вкусно и легко готовить.
14	4	49	Неплохая паста, но немного не хватало соли.
15	3	49	Ничего особенного, но в целом неплохо.
16	5	50	Лучший салат Цезарь, который я когда-либо пробовал!
17	4	50	Салат очень вкусный, но немного пересолен.
18	3	50	Классный салат, но гренки быстро размякли.
19	5	51	Бургер просто супер! Очень сытный.
20	4	51	Хороший бургер, но хотелось бы больше начинки.
21	3	51	Неплохой, но стандартный бургер.
22	5	52	Греческий салат просто великолепен!
23	4	52	Свежий и легкий, идеально подходит для лета.
24	3	52	Салат неплохой, но оливки не порадовали.
25	5	53	Курица терияки просто божественна!
26	4	53	Очень вкусно, но соус мог бы быть более насыщенным.
27	3	53	Неплохое блюдо, но я ожидал большего.
28	5	54	Ризотто получилось просто идеальным.
29	4	54	Вкусно, но нужно больше грибов.
30	3	54	Стандартное ризотто, ничего особенного.
31	5	55	Отличное рагу, сытное и ароматное!
32	4	55	Вкусно, но овощи могли бы быть более свежими.
33	3	55	Неплохо, но слишком много специй.
34	4	56	Очень нежный, но немного сладковатый.
35	5	57	Котлеты по-киевски - это нечто!
36	5	58	Чили кон карне - остро и вкусно!
37	3	57	Котлеты неплохие, но я ожидал больше зелени.
38	5	59	Лазанья просто великолепна!
39	3	59	Неплохая лазанья, но соус мог бы быть лучше.
40	4	60	Нежный суп, но хотелось бы больше специй.
41	4	61	Очень вкусно, но соус мог бы быть лучше.
42	3	61	Неплохие крылышки, но чуть слишком сладко.
43	4	62	Очень вкусно, но тесто могло бы быть более воздушным.
44	5	64	Киноа с овощами - это полезно и вкусно!
45	4	64	Неплохо, но хотелось бы больше овощей.
46	5	66	Блины с начинкой - это просто вкусно!
\.


--
-- Name: cuisine_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.cuisine_id_seq', 15, true);


--
-- Name: ingredient_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.ingredient_id_seq', 63, true);


--
-- Name: recipe_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.recipe_id_seq', 68, true);


--
-- Name: review_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.review_id_seq', 46, true);


--
-- Name: cuisine cuisine_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cuisine
    ADD CONSTRAINT cuisine_pkey PRIMARY KEY (id);


--
-- Name: ingredient ingredient_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ingredient
    ADD CONSTRAINT ingredient_pkey PRIMARY KEY (id);


--
-- Name: recipe recipe_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.recipe
    ADD CONSTRAINT recipe_pkey PRIMARY KEY (id);


--
-- Name: review review_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review
    ADD CONSTRAINT review_pkey PRIMARY KEY (id);


--
-- Name: recipe_ingredients fk115hxprua4ai0chlhicwmuhna; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.recipe_ingredients
    ADD CONSTRAINT fk115hxprua4ai0chlhicwmuhna FOREIGN KEY (ingredient_id) REFERENCES public.ingredient(id);


--
-- Name: review fk9dqw7ep5rnww1yuimutvg4nny; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review
    ADD CONSTRAINT fk9dqw7ep5rnww1yuimutvg4nny FOREIGN KEY (recipe_id) REFERENCES public.recipe(id);


--
-- Name: recipe fkdnb8kle6xjuko0df4jfb6tc7h; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.recipe
    ADD CONSTRAINT fkdnb8kle6xjuko0df4jfb6tc7h FOREIGN KEY (cuisine_id) REFERENCES public.cuisine(id);


--
-- Name: recipe_ingredients fkhnsmvxdlwxqq6x2wbgnoef5gr; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.recipe_ingredients
    ADD CONSTRAINT fkhnsmvxdlwxqq6x2wbgnoef5gr FOREIGN KEY (recipe_id) REFERENCES public.recipe(id);


--
-- PostgreSQL database dump complete
--

